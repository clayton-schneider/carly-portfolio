// Types
import { GetStaticProps } from "next";
import { PrismicDocument } from "@prismicio/types";
import { HeaderDocument } from "../types.generated";

// Components
import { Layout } from "../components/Layout";
// import { DefaultPortfolio } from "../components/Portfolio/Default";
import { Skills } from "../components/Skills";
import { Contact } from "../components/Contact";

// Data Fetching from Prismic
import { getHeaderProps } from "../utils/fetchData";

// Prismic Setup
import { SliceZone } from "@prismicio/react";
import { createClient } from "../prismicio";
import { components } from "../slices";

import Head from "next/head";

const Home = ({
  page,
  header,
}: {
  page: PrismicDocument;
  header: HeaderDocument;
}) => {
  return (
    <div>
      <Head>
        <title>Carly Fisher</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="overflow-x-hidden">
        <Layout header={header}>
          <>
            {/* <DefaultHero /> */}
            {/* <DefaultPortfolio /> */}
            <Skills />
            <Contact />
            <SliceZone slices={page.data.slices} components={components} />
          </>
        </Layout>
      </main>
    </div>
  );
};

export default Home;

export const getStaticProps: GetStaticProps = async ({ previewData }) => {
  // Because there is linked data
  // For Reference: https://community.prismic.io/t/not-able-to-query-slice-machine-slices-with-graphquery/7030/23
  const query = `{
    homepage{
      ...homepageFields
      slices{
       ...on hero{
         variation{
           ...on default{
             primary{
               ...primaryFields
             }
             items{
               ...itemsFields
             }
           }
         }
       }
       ...on portfolio{
         variation{
           ...on default{
             primary{
               sectionTitle
             }
             items {
               project{
                 ...projectFields
               }
             }
           }
         }
       }
     }
    }
  }`;

  const client = createClient({ previewData });

  const page = await client.getSingle("homepage", { graphQuery: query });
  const header = await getHeaderProps({ client });

  return {
    props: {
      page,
      header,
    },
  };
};
